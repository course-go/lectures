# Go Fundamentals
Course Go
Tags: golang, go

## Go Command

	bug         start a bug report
	build       compile packages and dependencies
	clean       remove object files and cached files
	doc         show documentation for package or symbol
	env         print Go environment information
	fix         update packages to use new APIs
	fmt         gofmt (reformat) package sources
	generate    generate Go files by processing source
	get         add dependencies to current module and install them
	install     compile and install packages and dependencies
	list        list packages or modules
	mod         module maintenance
	work        workspace maintenance
	run         compile and run Go program
	test        test packages
	tool        run specified go tool
	version     print Go version
	vet         report likely mistakes in packages

## Go keywords

    break     case   chan    const       continue
    default   defer  else    fallthrough for
    func      go     goto    if          import
    interface map    package range       return
    select    struct switch  type        var

[GothamGo 2018 - Things in Go I Never Use by Mat Ryer](https://youtu.be/5DVV36uqQ4E?si=hZDbgTxZiUAvAS3g)

## Packages and Imports

- Program building blocks ("libraries")
- Imported by other programs
- Package name is the last element of the import path
- [Standard library packages](https://pkg.go.dev/std)

```
package main
```

## Executable Packages 

- Have to be named `main`
- Have to contain `main()` function as entrypoint

## Hello world

.play assets/lecture-02/hello-world.go

```
$ go build hello.go
$ ./hello
Hello world
```

```
$ go run hello.go
Hello world
```

## Go Format

.play assets/lecture-02/unformatted-hello-world.go

```
go fmt gofmt.go
```

```
package main

import "fmt"

func main() {
    fmt.Println("Hello world")
}
```

## Workspace

- Defined by `$GOPATH` variable
    - `$HOME/go` by default
- Structured directory:
    - `/src`: historicaly used for storing source code
        - unused after introduction of go modules
    - `/pkg`: stores downloaded versioned packages
        - `go get`
    - `/bin`: contains executable binaries 
        - `go install`

## Unicode support

- all string literals use UTF-8

.play assets/lecture-02/hello-world-unicode.go

## Types and variables 

## Types

- Similar to C
- No auto casts
- Type inference and default types
- Each type has clear zero value (0, false, "")

```
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128
```

## Variables

.play assets/lecture-02/variables.go

## Constants

.play assets/lecture-02/const.go

## Type conversions

- No auto casts

.play assets/lecture-02/casts.go

## Control Flow

## Conditions

- Similarly to for loop allows init statement
- Variables declared there don't exist outside of the if block

.play assets/lecture-02/if.go

## Else statement

- Variables declared in the init statement do exist in the else block

.play assets/lecture-02/if2.go

## Switch statement

- Again allows init statement
- Like set of if-else statements
- Evaluated top-bottom, first successful case is executed
- Thus there's no break statement

.play assets/lecture-02/switch.go

## Switch statement 2

- Allows non-constant and non-integer values

.play assets/lecture-02/switch2.go

## Switch with no condition

- switch without condition is like switch true

.play assets/lecture-02/switch3.go

## Loops

- Only the `for` keyword exists

.play assets/lecture-02/for.go

## Loops

- break keyword
- continue keyword

## Labels

TODO

## Ignoring return values

- '`_`' idiom can be used to drop return values

.play assets/lecture-02/ignore-return-values.go

## Functions

## Functions

.play assets/lecture-02/functions.go

## Multiple return values

.play assets/lecture-02/functions2.go

## Named return values

.play assets/lecture-02/functions3.go

## Shortening argument type declaration

```
func calculate(x int, y int, z bool) (a int, b int) {
    // ...
}
```

```
func calculate(x, y int, z bool) (a, b int) {
    // ...
}
```

## Lambda functions

- a.k.a. function literals
- https://golang.org/ref/spec#Function_literals
- can be assigned to a variable or invoked directly

## Typical usages for lambda functions

- go blocks
- defer statement
- callback functions
- 'compare' for sorting

## Function as a value (like any other value)

.play assets/lecture-02/01_func_type.go

## Function with parameters as a value (like any other value)

.play assets/lecture-02/02_func_type.go

## Functions stored in local variables (just a toy)

.play assets/lecture-02/03_functions_as_values.go

## Anonymous functions (just a toy again)

.play assets/lecture-02/04_lambdas.go

## Function types

- a new type `BinaryOp` is defined
- it is used to specify parameter type in `applyBinaryOp`

.play assets/lecture-02/05_function_type.go /^package main/,/^func testBinaryOps/

## Function types (cont.)

.play assets/lecture-02/05_function_type.go /^func testBinaryOps/,/^}/

## Closures

- lambda functions that refer to variables defined outside the function
- it "closes over" another function -> the name closure
- code pointer and environment pointer internally
- useful for function that needs to store its state "somewhere"

## Practical example - sorting elements in slice

.play assets/lecture-02/06_sort_function.go /^package main/,/^func main/

## Practical example - sorting elements in slice (cont.)

.play assets/lecture-02/06_sort_function.go /^func main/,/^}/

## Practical example - sorting elements in a slice

- implemented as a closure

.play assets/lecture-02/07_sort_closure.go /^package main/,/^func main/

## Practical example - sorting elements in slice (cont.)

- implemented as a closure

.play assets/lecture-02/07_sort_closure.go /^func main/,/^}/

## Implementation of sort-by

.play assets/lecture-02/08_sort_by.go /^package main/,/^func main/

## Implementation of sort-by (cont.)

.play assets/lecture-02/08_sort_by.go /^func main/,/^}/

## Structures

## Methods on types

- a _method_ is a function that has a defined receiver
- (in OOP: a method is a function on an instance of an object)
- concept of a _receiver_
- usage - method declaration

    func (receiver) method_name(parameters) return_types {
        ...
        ...
        ...
    }

- method is called by

    some_object.method_name(parameters)

- methods can modify (mutate) a receiver
- call by value vs. call by reference (via pointer)

## User type with one method

.play lesson3/09_methods.go

## Receiver used as a value

.play lesson3/10_methods_with_parameters.go

## Receiver used via pointer

.play lesson3/11_methods_ptr.go

## Nil receiver

.play lesson3/21_nil_receiver.go

## More methods for the same type

.play lesson3/12_more_methods.go /// Line/,/End OMIT/


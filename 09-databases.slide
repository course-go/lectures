# Databases
Course Go
Tags: golang, go

## Outline

- SQL
- Go & SQL:
    - sql
    - sqlx
    - SQLC
    - GORM
- NoSQL

## SQL

## SQL

- **Structured Query Language**
    - Data definition language
        - `CREATE`/`ALTER`/`DROP`
    - Data query language
        - `SELECT`/`FROM`/`WHERE`
    - Data manipulation language
        - `SELECT`/`INSERT`/`UPDATE`/`DELETE`
    - Data control language
        - `GRANT`/`REVOKE`
- Standard way of communicating with RDBMSs

[Wikipedia: SQL](https://en.wikipedia.org/wiki/SQL)

## SQL

.code assets/lecture-09/sql/example.sql

## RDBMS

- Oracle
    - Commercial product
    - Heavily used in enterprise systems
    - Fintech etc.
- [MySQL](https://www.mysql.com)
    - Owned by Oracle after the aquisition of Sun Microsystems [2009]
    - Open-source
    - Dual-licensing
- MS SQL

[DB-Engines: Ranking](https://db-engines.com/en/ranking)

## RDBMS

- [PostgreSQL](https://www.postgresql.org)
    - Originated from `Ingres` project at University of California, Berkeley
    - Free and open-source, MIT-like license
    - Feature-rich
    - Plenty of extensions
- [MariaDB](https://mariadb.com)
    - Fork of MySQL
    - Community-driven
    - Remains highly compatible with MySQL

[DB-Engines: Ranking](https://db-engines.com/en/ranking)

## RDBMS

- [SQLite](https://www.sqlite.org)
    - Open-source, public domain
    - Lightweight, serverless
    - Uses ordinary disk files

[DB-Engines: Ranking](https://db-engines.com/en/ranking)

## Go & SQL

## Standard library

- Rather low-level
- Defines generic interfaces for SQL databases
- Needs to be used in conjuntion with a specific database driver
    - Plenty of [supported drivers](https://go.dev/wiki/SQLDrivers)
    - Drivers for all previously mentioned RDBMSs exist

[Go Packages: database/sql](https://pkg.go.dev/database/sql)

## Connection to a DB

.code assets/lecture-09/std/sql.go /MAIN START OMIT/,/MAIN END OMIT/

## DB type

- Returned by the `Open` functions
- Represents a connection pool
    - Can be tinkered with using methods like:
        - `SetConnMaxIdleTime(time.Duration)`
        - `SetConnMaxLifetime(time.Duration)`
        - `SetMaxIdleConns(int)`
        - `SetMaxOpenConns(int)`
- Safe for concurrent use
- Connections are represented by the [Conn](https://pkg.go.dev/database/sql#Conn) type
    - Always prefer the `DB` pool

[Go Packages: database/sql DB type](https://pkg.go.dev/database/sql#DB)

## Query types

- All of these exist in a `Context` variant
    - Again, always preferred
- **Exec**: no rows are returned

.code assets/lecture-09/std/sql.go /EXEC START OMIT/,/EXEC END OMIT/

- **QueryRow**: at most one row is expected

.code assets/lecture-09/std/sql.go /QUERYROW START OMIT/,/QUERYROW END OMIT/

## Query types

- **Query**: multiple values are expected

.code assets/lecture-09/std/sql.go /QUERY START OMIT/,/QUERY END OMIT/

## Transactions

- Manipulated via the [Tx](https://pkg.go.dev/database/sql#Tx) type returned by `Begin` functions

.code assets/lecture-09/std/sql.go /TRANSACTION START OMIT/,/TRANSACTION END OMIT/

## sqlx

## sqlx

- Extension to the standard `sql` library
- Provides plenty of additional features
    - Marshalling rows to structs
    - Named parameters
- The usage is not as tidious
- There is also a [SQLx](https://github.com/launchbadge/sqlx) library for Rust
    - Keep in mind when looking it up

[Go Packages: sqlx](https://pkg.go.dev/github.com/jmoiron/sqlx)

[GitHub IO: Illustrated guide to SQLX](http://jmoiron.github.io/sqlx/)

## Connecting to DB

.code assets/lecture-09/sqlx/sqlx.go /MAIN START OMIT/,/MAIN END OMIT/

[Github: sqlx usage](https://github.com/jmoiron/sqlx?tab=readme-ov-file#usage)

## Seed

.code assets/lecture-09/sqlx/sqlx.go /SEED START OMIT/,/SEED END OMIT/

[Github: sqlx usage](https://github.com/jmoiron/sqlx?tab=readme-ov-file#usage)

## Unmarshalling to structs

.code assets/lecture-09/sqlx/sqlx.go /SELECT START OMIT/,/SELECT END OMIT/

[Github: sqlx usage](https://github.com/jmoiron/sqlx?tab=readme-ov-file#usage)

## Maps in selects

.code assets/lecture-09/sqlx/sqlx.go /MAP START OMIT/,/MAP END OMIT/

[Github: sqlx usage](https://github.com/jmoiron/sqlx?tab=readme-ov-file#usage)

## Batch inserts

.code assets/lecture-09/sqlx/sqlx.go /BATCH-INSERT START OMIT/,/BATCH-INSERT END OMIT/

[Github: sqlx usage](https://github.com/jmoiron/sqlx?tab=readme-ov-file#usage)

## SQLC

## SQLC

- TODO

## GORM

- full-featured ORM
- high-level
- [GORM project page](https://gorm.io/index.html)

## Showcase

.code assets/lecture-09/gorm_showcase.go

## Model

.code assets/lecture-09/gorm_model.go

## CRUD - Create

- creating single record

.code assets/lecture-09/gorm_create.go

- create multiple records

.code assets/lecture-09/gorm_create_multiple.go

- create with selected fields

.code assets/lecture-09/gorm_create_selected_fields.go

## CRUD - Read

- reading a single record

.code assets/lecture-09/gorm_read.go

## CRUD - Read

- reading using primary key

.code assets/lecture-09/gorm_read_pk.go

- read all records

.code assets/lecture-09/gorm_read_all.go

## CRUD - Read

- reading using conditions

.code assets/lecture-09/gorm_read_conditions.go

## CRUD - Update

- *Save## saves all fields

.code assets/lecture-09/gorm_save.go

- if *Save## value does not contain primary key, it will execute create instead

.code assets/lecture-09/gorm_save_create.go

## CRUD - Update

- update single column

.code assets/lecture-09/gorm_update_single.go

- update multiple columns

.code assets/lecture-09/gorm_update_multiple.go

- without specifying the user using the Model, GORM executes batch update 

.code assets/lecture-09/gorm_update_batch.go

## CRUD - Delete 

- deleting using primary key

.code assets/lecture-09/gorm_delete_pk.go

## CRUD - Delete 

- batch delete using where

.code assets/lecture-09/gorm_batch_delete.go
.code assets/lecture-09/gorm_batch_delete_with_pk.go

## CRUD - Delete 

- does soft delete when structure containts gorm.DeletedAt field 

.code assets/lecture-09/gorm_soft_delete.go

## Associations - Has Many

- 1:N - declaration using slice and foreign key

.code assets/lecture-09/gorm_has_many_declare.go

- retrieving the data

.code assets/lecture-09/gorm_has_many_retrieve.go

## Associations - Many to Many

- N:M - automatically add a join table
- declaration using slices and tags

.code assets/lecture-09/gorm_many_to_many_declare.go

## Associations - Many to Many

- retrieving the data

.code assets/lecture-09/gorm_many_to_many_retrieve.go

## Conventions

- uses field *ID## as the table's primary key by default

.code assets/lecture-09/gorm_id.go

- can be overwritten with a tag

.code assets/lecture-09/gorm_overwritten_id.go

## Conventions

- uses struct names as table names
- converts all names to snake_case

.code assets/lecture-09/gorm_snake_case.go

- table names can be overwritten using Tabler interface

.code assets/lecture-09/gorm_tabler.go

## Conventions

- column names can be overwritten using tags

.code assets/lecture-09/gorm_column_tags.go

## Conventions

- *CreatedAt## and *UpdatedAt## are automatically tracked for you

.code assets/lecture-09/gorm_created_at.go

- can be disabled

.code assets/lecture-09/gorm_disabled_created_at.go

## Raw SQL 

- also supports raw sql execution

.code assets/lecture-09/gorm_raw_sql.go
.code assets/lecture-09/gorm_raw_sql_exec.go

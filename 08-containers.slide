# Containers
Course Go
Tags: golang, go

## Outline

- Containers
- Docker
    - Desktop
    - Engine
    - Hub
    - Build
    - Compose
- Podman
- Testcontainers
- Kubernetes

## Containers

## Containers

- A form of virtualization
- Lightweight version of virtual machines (VMs)
    - Does not use a hypervisor
    - Reuses host OS
    - Requires:
        - Compatible kernel
        - Container runtime
- Shipped in a form of images
    - The image generally includes all of its dependencies

[Google Cloud: Containers](https://cloud.google.com/learn/what-are-containers)

##

.image assets/lecture-08/containers/containers-and-vms.svg 450 _

## Containers vs VMs

- VMs are generally used for infrastructure provisioning
    - Provide better resource isolation
        - Virtualizes at the hardware level
- Containers serve as a tool for developers for shipping software
    - More lightweight
        - Virtualizes at the OS level
        - Share the OS kernel
            - Fraction of the memory is used

[Google Cloud: Containers vs VMs](https://cloud.google.com/discover/containers-vs-vms)

## Motivation

- Local development
    - Running dependecies
    - Minimal overhead
- Production environment
    - Shipping deyployable units of software
    - Simplifies collaboration with DevOps/Ops engineers

## Open Container Initiative (OCI)

- Specifies industry standards around container technology
- Formed under the Linux Foundation
- Launched by Docker and other leaders in the container industry [2015]
- Three specifications:
    - [Runtime Specification](https://github.com/opencontainers/runtime-spec?tab=readme-ov-file)
    - [Image Specification](https://github.com/opencontainers/image-spec)
    - [Distrubution Specification](https://github.com/opencontainers/distribution-spec)

[GitHub: Open Container Initiative](https://github.com/opencontainers)

## Docker

## Docker

- Containers & their related technologies existed well before Docker
    - Google's Borg [2003]
    - cgroups [2008]
    - [LXC](https://linuxcontainers.org) [2008]
- Docker just created a platform around them [2013]
    - User friendly API
- Platform as a Service

_"Commercial use of Docker Desktop in larger enterprises (more than 250 employees OR more than $10 million USD in annual revenue) requires a paid subscription."_

[Docker](https://docker.com)

[Tech Target: Evolution of containers](https://www.techtarget.com/searchitoperations/feature/Dive-into-the-decades-long-history-of-container-technology)

##

.image assets/lecture-08/docker/ship-your-machine.jpg 500 _

[Reddit: ProgrammerHumor](https://www.reddit.com/r/ProgrammerHumor/comments/cw58z7/it_works_on_my_machine/)

## Docker Desktop

## Docker Desktop

- All-in-one package
- Includes all necessary tools:
    - Docker Engine
    - Docker CLI
    - Docker Build
    - Docker Compose
    - And a few more tools...

[Docker: Docker Desktop](https://docs.docker.com/desktop/)

## Docker Hub

## Docker Hub

- Image registry

[Docker: Docker Hub](https://docs.docker.com/docker-hub/)

## Docker Build

## Docker Build

- Tool for building Docker images

[Docker: Docker Build](https://docs.docker.com/build/)

## Multi-stage builds

- Out runtime usually does not require the SDK, it's dependencies or the compiler
    - In Go, we only need the final binary
- Multi-stage builds allow us to separate the image creation into multiple stages
- Pros:
    - Smaller image size
    - Flexibility
        - Different images can be used for each step

[Docker: Multi-stage builds](https://docs.docker.com/build/building/multi-stage/)

## Multi-platform builds

- By default, Docker creates images compatible with the builder's platform
    - E.g. `linux/amd64`
- Multi-platform builds allow us to create images supporting multiple platforms

[Docker: Multi-platform builds](https://docs.docker.com/build/building/multi-platform/)

## Docker Compose

## YAML

- _Yet Another Markup Language_
    - _YAML Ain't Markup Language_

## Docker Compose

- Tools for orchestrating multiple images at once

[Docker: Docker Compose](https://docs.docker.com/compose/)

## Podman

## Podman

- An alternative to Docker
    - Part of a `containers` collection of open-source tools

[GitHub: Containers](https://github.com/containers/)

## Testcontainers

## Testing with dependencies

- Not all tests require real dependencies
    - Fakes can be used
- However, integration with real services has to be tested at some point
- Isolation of tests
    - Multiple tests share a single database instance
        - Create a new database per each test
        - The single instance has to actually exist
            - Docker Compose
    - Or spawn per test instance
        - Testcontainers

## Testcontainers

- Allows running containers directly in code
- Simplifies testing against real services
- SDK for many languages:
    - Go, Rust, Java, .NET, Python, Node.js, Haskell...
- Keep in mind that spawning containers is not cheap
    - [postgres:16](https://hub.docker.com/_/postgres) image has around 450 MB

[Testcontainers](https://testcontainers.com)

## Testcontainers

.code assets/lecture-08/testcontainers/quickstart.go /START OMIT/,/END OMIT/

[Testcontainers for Go: Quickstart](https://golang.testcontainers.org/quickstart/)

## Modules

- Preconfigured implementations of various dependencies
    - All major databases
    - Message brokers
    - Cloud SDKs

[Testcontainers: Modules](https://testcontainers.com/modules/)

## Modules

.code assets/lecture-08/testcontainers/module.go /START OMIT/,/END OMIT/

[Testcontainers for Go: Postgres module](https://golang.testcontainers.org/modules/postgres/)

## Kubernetes

## Kubernetes

- TODO

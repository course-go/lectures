# Observability
Course Go
Tags: golang, go

## Outline

- Health
- Metrics
    - Prometheus
    - Grafana
- Logs
    - Loggers
    - Loki
- Traces
    - Jaeger
- OpenTelemetry

## Health

## Health

- Used to ping or to healthcheck a service instance
- Reports on service components/dependencies health
- Usually exposed as `/health` or `/status`

```
{
  "name": "API",
  "version": "v1.15.3"
  "status": "NOK",
  "components": {
    "database": {
      "status": "OK",
      "timestamp": "2024-05-04T12:10:18.001547Z"
    },
    "exporter": {
      "status": "NOK",
      "timestamp": "2024-05-04T12:13:45.652785Z",
      "error": "corrupted data"
    }
  }
}
```

## Health

.code assets/lecture-11/health/health.go /START OMIT/,/END OMIT/

[GitHub: alexliesenfeld/health](https://github.com/alexliesenfeld/health)

## Metrics

## Metrics

- Runtime service measurements
    - Quantifiable
- Examples:
    - "Service uptime"
    - "Memory allocations"
    - "HTTP requests count"
    - "HTTP response time"

## Prometheus

- System monitoring tool
- Built at SoundCloud [2012]
    - A CNCF project since 2016
- Custom Prometheus Query Language ([PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/))
- [Stores data](https://prometheus.io/docs/prometheus/latest/storage/) as time series
- Exercises the pull strategy by default
    - Pushing can be set-up using the [pushgateway](https://github.com/prometheus/pushgateway)
- Supports [alerting](https://prometheus.io/docs/alerting/latest/overview/) out of the box

[Prometheus](https://prometheus.io)

[GitHub: Prometheus](https://github.com/prometheus/prometheus)

## Prometheus Configuration

.code assets/lecture-11/metrics/prometheus.yaml

[Prometheus: Configuration](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)

## Metric types

- Counter
    - Incrementing counter
- Gauge
    - Numerical value
- Histogram
    - Samples observations
    - Distributes values into buckets
- Summary
    - [Similar to Histogram](https://prometheus.io/docs/practices/histograms/)
    - Exposes quantiles

[Prometheus: Metric Types](https://prometheus.io/docs/concepts/metric_types/)

## Prometheus Metrics

.code assets/lecture-11/metrics/prometheus-metrics.text

## Instrumenting

.code assets/lecture-11/metrics/prometheus-instrumenting.go /START OMIT/,/END OMIT/

[Prometheus: Instrumenting Go Application](https://prometheus.io/docs/guides/go-application/)

## PromQL

- Metrics are requested by name

```
promhttp_metric_handler_requests_total
```

- Can be filtered using labels

```
promhttp_metric_handler_requests_total{code="200"}
```

- Number of unique metrics with given name

```
count(promhttp_metric_handler_requests_total)
```

- Average `/metrics` handler requests with status OK across 3 minute windows

```
rate(promhttp_metric_handler_requests_total{code="200"}[3m])
```

- Average HTTP request duration split by 3 minute windows

```
sum(rate(http_request_duration_seconds_sum[3m])) / sum(rate(http_request_duration_seconds_count[3m]))
```

##

.image assets/lecture-11/metrics/prometheus-query-table.png 550 _

##

.image assets/lecture-11/metrics/prometheus-query-graph.png 580 _

##

.image assets/lecture-11/metrics/prometheus-query-graph-rate.png 600 _

## Grafana

- Visualization tool
    - Supports alerting
- Supports over [150 datasources](https://grafana.com/grafana/plugins/data-source-plugins/)
- Grafana also provides its own fully managed [Grafana Cloud](https://grafana.com/products/cloud/)
    - [Free plan](https://grafana.com/pricing/)
        - 10k metrics
        - 14-day retention
        - 50 GB of logs and metrics

[Grafana Labs: Grafana](https://grafana.com/grafana/)

[GitHub: Grafana](https://github.com/grafana/grafana)

## 

.video assets/lecture-11/metrics/grafana.mp4 video/mp4 520 _

[Grafana Labs: Grafana sandbox](https://play.grafana.org/d/000000012/grafana-play-home?orgId=1)

## Logs

## Logs

- The most basic form of telemetry
- Timestamped text records
    - Structured
    - Unstructured
- Generally supported by programming languages out of the box
    - [log](https://pkg.go.dev/log)
    - [slog](https://pkg.go.dev/slog)

## zap

- Created by Uber
- Focuses on performance
- Minimalizes allocations
- [Extendable](https://pkg.go.dev/go.uber.org/zap#hdr-Extending_Zap)

.code assets/lecture-11/logs/zap.go /START OMIT/,/END OMIT/

[GitHub: zap](https://github.com/uber-go/zap)

[BetterStack: Complete Guide to Zap](https://betterstack.com/community/guides/logging/go/zap/)

## zerolog

- Inspired by zap
- Comes out the fastest according to [benchmarks](https://github.com/uber-go/zap?tab=readme-ov-file#performance)

.code assets/lecture-11/logs/zerolog.go /START OMIT/,/END OMIT/

[GitHub: zerolog](https://github.com/rs/zerolog)

[BetterStack: Complete Guide to Zerolog](https://betterstack.com/community/guides/logging/zerolog/)

## Loki

- Horizontally-scalable, highly-available, log aggregation system
    - Inspired by Prometheus
    - Focuses on logs instead of metrics
- Created by Grafana Labs and maintained under the CNCF
- The log data are compressed and [stored](https://grafana.com/docs/loki/latest/get-started/architecture/#storage) in chunks
    - Object storage
- [Labels](https://grafana.com/docs/loki/latest/get-started/labels/) the data and uses the labels to index them
- Multiple clients can be configured to collect the logs
- Custom [LogQL](https://grafana.com/docs/loki/latest/query/) query language similar to PromQL

[Grafana Lab: Loki](https://grafana.com/oss/loki/)

[GitHub: Loki](https://github.com/grafana/loki)

## Architecture

- Modular system composed of multiple [components](https://grafana.com/docs/loki/latest/get-started/components/)
    - Can be deployed:
        - All-in-one
        - In logical groups
        - Individually

```
$ loki -config.file=loki.yaml -target all
$ loki -config.file=loki.yaml -target write
$ loki -config.file=loki.yaml -target compactor
```

[Grafana Labs: Loki deployment modes](https://grafana.com/docs/loki/latest/get-started/deployment-modes/)

## Configuration

.code assets/lecture-11/logs/loki.yaml

[Grafana Lab: Loki configuration](https://grafana.com/docs/loki/latest/configure/)

## Clients

- [Promtail](https://grafana.com/docs/loki/latest/send-data/promtail/)
    - Logging agent
    - Reuses Prometheus `scrape_configs` configuration
- [Docker Driver](https://grafana.com/docs/loki/latest/send-data/docker-driver/)
    - Docker plugin that reads container logs and pushes them to Loki
- [OpenTelemetry Collector](https://grafana.com/docs/loki/latest/send-data/otel/)
    - Loki can ingest OTel logs
    - More on OpenTelemetry later
- [Grafana Alloy](https://grafana.com/docs/alloy/latest/)
    - Grafanas distribution of OpenTelemetry Collector

[Grafana Labs: Send log data to Loki](https://grafana.com/docs/loki/latest/send-data/)

## Traces

## Traces

- Model work in distributed systems
- Each trace models a transaction through your system 
    - End-to-end request/response
- Traces are basically a set of interconnected logs
    - Even through multiple services
- Each trace is made up of a single or multiple spans
    - Span models a part of the transaction
        - A span can model a service interaction or a interaction within a component etc.
    - Each spans contains tags/attributes
        - Provide additional context

## Spans

.image assets/lecture-11/traces/spans.svg 450 _

[Jaeger: Spans](https://www.jaegertracing.io/docs/1.57/architecture/#span)

## Jaeger

- Distrubuted tracing platform
- Inspired by Dapper and OpenZepkin
- Created by Uber
    - A CNCF graduated project
- Nowadays uses OpenTelemetry for instrumentation
    - Previously had own clients
- Supports multiple storage backends
    - Most notable are Cassandra, Elasticsearch, and Kafta
- Jaeger maintains a [hotrod demo](https://github.com/jaegertracing/jaeger/tree/main/examples/hotrod)

[Jaeger](https://www.jaegertracing.io)

##

.image assets/lecture-11/traces/jaeger-traces-view.png 520 _

[Jaeger: Introduction](https://www.jaegertracing.io/docs/1.57/#screenshots)

##

.image assets/lecture-11/traces/jaeger-traces-detail-view.png 520 _

[Jaeger: Introduction](https://www.jaegertracing.io/docs/1.57/#screenshots)


## Architecture

- Similarily to Loki, Jaeger can be:
    - Deployed as a all-in-one bianry
    - Or split by components
- Components
    - Collector
        - Receives traces, runs them through a pipeline and saves it
    - Query
        - Exposes query API and hosts UI
    - Ingester
        - Adds support for Kafka

[Jaeger: Architecture](https://www.jaegertracing.io/docs/1.57/architecture/)

## Architecture

.image assets/lecture-11/traces/jaeger-architecture.svg 320 _ 

[Jaeger: Architecture](https://www.jaegertracing.io/docs/1.57/architecture/)

## OpenTelemetry

## OpenTelemetry

- OTel
- Create by merging [OpenCensus](https://opencensus.io) and [OpenTracing](https://opentracing.io) in 2019
    - Again, a CNCF project

[OpenTelemetry](https://opentelemetry.io)

## Instrumentation

- Many libraries provide automatic intrumentation via plugins
    - [OpenTelemetry Registry](https://opentelemetry.io/ecosystem/registry/?s=sqlx&component=&language=)
- Or you can use the SDK directly
    - [OpenTelemetry-Go](https://github.com/open-telemetry/opentelemetry-go)

## Demo

- OpenTelemetry maintains a up-to-date demo
    - Microservice-based distributed system
    - Showcases OTel usage

[OpenTelemetry Demo Documentation](https://opentelemetry.io/docs/demo/)

[GitHub: OpenTelemetry Astronomy Shop](https://github.com/open-telemetry/opentelemetry-demo)

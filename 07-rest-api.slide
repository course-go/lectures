# REST APIs
Course Go
Tags: golang, go

## Outline

- JSON
- REST API
- HTTP Web server
- Routers
- Middleware
- OpenAPI
- Testing

## JSON

## JSON

- JavaScript Object Notation
    - Standardized file format
    - Human readable
    - Based on attribute-value pairs
- Nowadays, de-facto standard format for web services communication

## JSON data types

- Number
- String
- Boolean
- Array
- Object
- Null

## JSON

.code assets/lecture-07/json/user.json

## JSON in Go

- JSON serialization and deserialization supported by standard library
    - Called marshalling and unmarshalling in Go
    - Under the `encoding` packages
        - Also supports other common formats:
            - CSV
            - YAML
            - Base64 & Base32
            - Binary
            - And a few more...
- Uses reflection

[Go Packages: encoding/json](https://pkg.go.dev/encoding/json)

## JSON in Go (1/2)

.code assets/lecture-07/json/marshalling.go /START OMIT/,/MIDDLE OMIT/

## JSON in Go (2/2)

.play assets/lecture-07/json/marshalling.go /MIDDLE OMIT/,/END OMIT/

## Struct tags

- Encoding formats can be customized using struct tags
    - Discoverable via reflection
        - [StructTag.Get()](https://pkg.go.dev/reflect#StructTag.Get)
    - Also used for ORMs, etc.

[Go Wiki: Well-known struct tags](https://go.dev/wiki/Well-known-struct-tags)

## JSON in Go (1/2)

.code assets/lecture-07/json/marshalling-tags.go /START OMIT/,/MIDDLE OMIT/

## JSON in Go (2/2)

.play assets/lecture-07/json/marshalling-tags.go /MIDDLE OMIT/,/END OMIT/

## HTTP

## HTTP

- Hypertext Transfer Protocol
    - Application layer protocol
    - Client-server
- Proposed by [Time Bernars-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee) in 1989
    - Foundation of World Wide Web
    - Originally designed to transmit HTML documents
        - Later made extensible via headers

[mdn web docs: HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP)

## HTTP requests

- HTTP version
- HTTP method
    - GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS
- URL
- HTTP request headers
    - Key-value pairs
- Optional HTTP body

.code assets/lecture-07/http/request.txt

## HTTP response

- HTTP version
- HTTP status code
- HTTP status message
- HTTP response headers
- Optional HTTP body

.code assets/lecture-07/http/response.txt

## HTTP status codes

- Informational: 1**
- Successful: 2**
- Redirection: 3**
- Client error: 4**
- Server error: 5**

[mdn web docs: HTTP response status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)

## HTTP versions

- Purely text versions
- HTTP 0.9
    - The one-line protocol
- HTTP 1.0
    - Used since 1991
    - Standardized in 1996 [[RFC 1945]](https://datatracker.ietf.org/doc/html/rfc1945)
    - Creates new TCP connection per request
- HTTP 1.1
    - Standardized in 1997 [[RFC 2068]](https://datatracker.ietf.org/doc/html/rfc2068)
    - Persistent connections
    - Introduced pipelining 

## HTTP versions

- HTTP 2.0
    - Standardized in 2015 [[RFC 9113]](https://datatracker.ietf.org/doc/html/rfc9113)
    - Aimed to improve performance
    - Messages are embedded into a binary structure
        - Compresses headers
    - Multiplexes messages over a single connection
- HTTP 3.0 
    - Standardized in 2022 [[RFC 9114]](https://datatracker.ietf.org/doc/html/rfc9114)
    - Builds on top of QUIC protocol
        - Runs multiple streams over UDP

[Web Almanac: HTTP](https://almanac.httparchive.org/en/2021/http)

## CORS

- Cross-Origin Resource Sharing
- HTTP-header based mechanism
- Allows servers to specify origins from which browsers can fetch resources

[mdn web docs: HTTP CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)

## Cookies

- Piece of data sent from server to user
- The cookie is stored on the client side
    - Afterwards sent with every request
- Common use cases:
    - Session management
    - Personalization
    - Tracking
    
.code assets/lecture-07/http/cookies.txt

[mdn web docs: HTTP cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)

## REST API

- Emerged in 2000
- Reused already existing HTTP 1.1 methods
    - No changes were required
- Set of architectural constaints
    - Uniform interface
    - Client-server architecture
    - Defines a set of resources
    - Stateless communication

[mdn web docs: REST](https://developer.mozilla.org/en-US/docs/Glossary/REST)

## Go standard library & HTTP

## net package

- TODO

## net/http package

- TODO

[Go Internals: HTTP request multiplexing in Go](https://akshay-kumar.hashnode.dev/go-internals-http-request-multiplexing-in-go-1)

[Dreams of Code: The standard library now has all you need for routing in Go](https://www.youtube.com/watch?v=H7tbjKFSg58)

## Middleware

- TODO

## Negroni

- Middleware-focused library
- Idiomatic approach to web middleware in Go
- Encourages use of `net/http` handlers

[GitHub: negroni](https://github.com/urfave/negroni)

## Third party web routers & frameworks

## mux

- One of the oldest routers, if not the oldest
    - Created in 2012
- Part of the [gorilla web toolkit](https://github.com/gorilla)
    - [sessions](https://github.com/gorilla/sessions) for cookie nad session management
    - [websocket](https://github.com/gorilla/websocket) implements the WebSocket protocol
    - [handlers](https://github.com/gorilla/handlers) is a collection of middleware handlers
    - And a few more...
- Lost maintainers and got archived for some time in December 2022
    - [Revived in July 2023](https://gorilla.github.io/blog/2023-07-17-project-status-update/)

[GitHub: mux](https://github.com/gorilla/mux)

## chi

- Lightweight, idiomatic router
- Compatible with net/http
    - Reuse any router or middleware
- Comes with it's own [middleware package](https://pkg.go.dev/github.com/go-chi/chi/v5/middleware)

[GitHub: chi](https://github.com/go-chi/chi)

[Chi: documentation](https://go-chi.io/#/README)

## fasthttp

- Alternative HTTP implementation
    - Up to 10x faster than [net/http](https://pkg.go.dev/net/http)
    - Optimized for thousands of small to medium sized requests per second with consistent low millisecond response times
- Does not provide `ServeMux`
- Multiple routers build on top of it:
    - [fiber](https://github.com/gofiber/fiber)
    - [atreugo](https://github.com/savsgio/atreugo)
    - [fasthttp-routing](https://github.com/qiangxue/fasthttp-routing)

[GitHub: fasthttp](https://github.com/valyala/fasthttp)

## Fiber

- [Express](https://expressjs.com) inspired web framework
    - Yes, that Javascript framework
- Built on top of fasthttp

[GitHub: fiber](https://github.com/gofiber/fiber)

[Fiber: documentation](https://docs.gofiber.io)

*You will like the docs if you like emojis*

## Echo

- Web framework

[GitHub: fiber](https://github.com/labstack/echo)

[Echo: documentation](https://echo.labstack.com/docs)

## Iris

- Web framework

[GitHub: iris](https://github.com/kataras/iris)

[Iris: documentation](https://www.iris-go.com/docs)

## Gin

- Fully fledged web framework
- Features [martini](https://github.com/go-martini/martini)-like API
    - Martini is no longer maintained
- Most popular and used Go web framework
     - ~75.000 stars on GitHub

[GitHub: gin](https://github.com/gin-gonic/gin)

[Gin Web Framework: documentation](https://gin-gonic.com/docs/)

## Open API

## Open API

- TODO

[OpenAPI.Tools](https://openapi.tools)

## Generating Open API

- Multiple libraries:
    - [swag](https://github.com/swaggo/swag)
    - [go-swagger](https://github.com/go-swagger/go-swagger)
    - [kin-openapi](https://github.com/getkin/kin-openapi)

## swag

- Tool for generating Open API specification from source code
- Multiple middleware plugins for major routers/frameworks
    - [gin](https://github.com/swaggo/gin-swagger)
    - [fiber](https://github.com/swaggo/fiber-swagger)
    - [echo](https://github.com/swaggo/echo-swagger)
    - [net/http](https://github.com/swaggo/http-swagger)

[GitHub: swag](https://github.com/swaggo/swag)

## Open API code generation

- Code can also be generated from the specification
- Multiple tools:
    - [oapi-codegen](https://github.com/deepmap/oapi-codegen)
    - [ogen](https://github.com/ogen-go/ogen)

## Testing web servers

- TODO

## !!OLD SLIDES!!

## Web services in Go

- one of he most common thing written in go these days
- largery used in http-based microservices 
- rich support for HTTP-related directly [[https://golang.org/pkg/net/http/][in the language]] (batteries included)

## Basic web server

.play assets/lecture-07/web_server.go

## Basic web server

- a global `http.DefaultServerMux` is used for registering handlers

## Web server with more control

.play assets/lecture-07/web_server_more_control.go /^func main/,/^}/

## Multiple paths

.play assets/lecture-07/web_server_multi.go

## Multiple paths

-  the longest prefix always wins

## Inspecting requests (cool trick)

.play assets/lecture-07/web_server_inspect.go

## Parsing requests: query

.play assets/lecture-07/web_server_params.go

## Parsing requests: raw body

.play assets/lecture-07/web_server_body.go

## Parsing requests: json

.play assets/lecture-07/web_server_json.go

## Parsing requests: json (2)

.play assets/lecture-07/web_server_json_2.go

## Headers and status codes

.play assets/lecture-07/web_server_headers.go

## Status codes (2)

.play assets/lecture-07/web_server_status_codes.go

## Client

.play assets/lecture-07/client.go

## Client (post)

.play assets/lecture-07/client_post.go /// Params/,/End OMIT/

## Proxy

.play assets/lecture-07/proxy.go

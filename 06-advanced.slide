# Performance, CGo, Unsafe & Reflection
Course Go
Tags: golang, go

## Outline

- Benchmarks
- Optimizations
    - References & Values
    - Maps
    - Slices
    - For-each loops
    - Strings
- CGo
- Unsafe
- Reflection

## Benchmarks

## Benchmarks

- Part of standard Go tooling
- Benchmarks are a part of the test files
- Each benchmark is also a function that has to:
    - Start with the **`Benchmark`** prefix
    - Take in a single armung of type **`*testing.B`**

[Go Packages: testing benchmarks](https://pkg.go.dev/testing#hdr-Benchmarks)

## The B type

- Like the **`*testing.T`** type, the **`*testing.B`** is used to interact with the benchmark
    - It extends the testing type with additional methods
- **`N`**: exposes number of runs for the benchmark
- **`StartTimer`**: starts the benchmark timer
- **`StopTimer`**: stops the benchmark timer
- **`ResetTimer`**: resets the benchmark timer
- **`Elapsed`**: returns elapsed time
- **`ReportAllocs`**: enables malloc statistics
- And a few more...

[Go Packages: testing B type](https://pkg.go.dev/testing#B)

## Running benchmarks

- Benchmarks are run via the **`go test`** subcommand
    - With the **`-bench`** option
        - Requires path or regex for benchmark name
- Related options include:
    - **`-count`**: specifies how many times the benchmark is run
    - **`-benchtime`**: sets minimum amount of time
        - 1s by default
    - **`-benchmem`**: prints memory allocation statistics
- Example usage:

```
$ go test -bench Slice -benchmem -count 5 -benchtime 3s
```

## Slice benchmark

.code assets/lecture-06/benchmarks/slices_test.go /START OMIT/,/END OMIT/

## Benchmark result

.code assets/lecture-06/benchmarks/slices-out.txt

_Note that all benchmarks in these slides were run using Go 1.22 on MacBook Pro M2 Max_

## Benchstat

- Tool for computing statistical summaries
    - Parses benchmark output
- Allows comparing benchmark runs
- Can be installed like so:

```
$ go install golang.org/x/perf/cmd/benchstat@latest
```

[Go Packages: benchstat](https://pkg.go.dev/golang.org/x/perf/cmd/benchstat)

## Benchstat usage

- Output the benchmark to separate file:

```
$ go test -bench Slice -benchmem -count 10 | tee out.txt
```

- Examine benchmark:

```
$ benchstat out.txt
```

- Compare benchmark runs:

```
$ benchstat old.txt new.txt
```

## Benchstat output

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/benchmarks
                             │   out.txt   │
                             │   sec/op    │
SliceCreation-12               2.445m ± 2%
SliceCreationPreallocated-12   511.1µ ± 0%
geomean                        1.118m

                             │   out.txt    │
                             │     B/op     │
SliceCreation-12               39.75Mi ± 0%
SliceCreationPreallocated-12   7.633Mi ± 0%
geomean                        17.42Mi

                             │  out.txt   │
                             │ allocs/op  │
SliceCreation-12               39.00 ± 0%
SliceCreationPreallocated-12   1.000 ± 0%
geomean                        6.245
```

## Timers

.code assets/lecture-06/benchmarks/timers_test.go /START OMIT/,/END OMIT/

## Profiling

## Profiling

- Go has a built-in profiler
- Pretty user friendly
- Workflow:
    - A profile has to be generated first
        - Tests using [flags](https://pkg.go.dev/cmd/go/internal/test)
        - During the [runtime of the application](https://pkg.go.dev/runtime/pprof)
        - By invoking [HTTP requests](https://pkg.go.dev/net/http/pprof)
    - The profile can be inspected using the `pprof` tool

[Go Blog: Profiling Go Programs](https://go.dev/blog/pprof)

## Profiles

- Multiple predefined profile types:
    - CPU
    - Goroutine
    - Heap/Memory
    - Mutex
    - Block
- The options slightly vary by the way you generate the profile

[Go Packages: runtime/pprof Profile type](https://pkg.go.dev/runtime/pprof#Profile)

## Usage

- Memory profile

```
$ go test -bench . -memprofile profile.out
$ go tool pprof profile.out
$ go tool pprof -http localhost:8080 profile.out
```

- CPU profile

```
$ go test -bench . -cpuprofile profile.out
$ go tool pprof profile.out
```

- HTTP

```
$ go tool pprof http://localhost:6060/debug/pprof/heap
```

- Many other commands/outputs:
    - web/pdf/png/gif/dot/proto
- Configurable options and what to display

## Optimizations

## Optimizations

- Go compiler is pretty straightfoward (= dumb)
- It needs some help from developers

## Some interesting areas backed by experience

1. _"Pass structures by reference, not by value"_
2. _"Pass receivers by reference, not by value"_
3. _"Maps & slides pre-allocation"_
4. _"Arrays vs slices"_

- Most things mentioned are unidiomatic!

## Pass structures by reference, not by value

- All data types are passed by value into functions and methods
    - Good from "state-space" perspective
    - Not so good from performance point of view
- Problem definition:
    - Large structures passed by value everywhere in the code
    - Even within inner loops
    - It causes overhead that is easy to avoid
        - But at cost: wrong semantic is used

## Large config (1/3)

.code assets/lecture-06/optimizations/config.toml /START OMIT/,/END OMIT/

## Large config (2/3)

.code assets/lecture-06/optimizations/config.go /^type Config/,/^}/

.code assets/lecture-06/optimizations/config.go /^type StorageConfiguration/,/^}/

## Large config (3/3)

.code assets/lecture-06/optimizations/config.go /^type KafkaConfiguration/,/^}/

## Config getter

.code assets/lecture-06/optimizations/config.go /VALUE START OMIT/,/VALUE END OMIT/

- Config is passed by value
- Pros:
    - Pretty idiomatic
    - Basically declares that the structure is immutable
- Cons:
    - The config is always copied
        - Structure size is about 700 bytes!

## Dirty solution

.code assets/lecture-06/optimizations/config.go /REFERENCE START OMIT/,/REFERENCE END OMIT/

- The only possible solution in Go
    - Different semantic:
        - Passing by reference implies that the struct can be changed within
- Unfortunately we can't distinguish between `const` and `mut`
    - Mutation (or the lack of it) has to be checked by unit tests

## Benchmark helper functions

.code assets/lecture-06/optimizations/config_test.go /HELPER START OMIT/,/HELPER END OMIT/

## Benchmarks

.code assets/lecture-06/optimizations/config_test.go /BENCHMARK START OMIT/,/BENCHMARK MIDDLE OMIT/

## Benchmark results

```
$ go test -bench ConfigurationFunction -benchtime 3s -cpuprofile config.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkGetStorageConfigurationFunctionByValue-12          263807433                13.53 ns/op
BenchmarkGetStorageConfigurationFunctionByReference-12     1000000000               0.2815 ns/op
```

- That is **5516%** speed increase
    - `memcpy` operation elimination

## Profile

.image assets/lecture-06/optimizations/config-profile.png 550 _

## What about methods?

- The same issue and simple fix

.code assets/lecture-06/optimizations/config.go /RECEIVER START OMIT/,/RECEIVER END OMIT/

## Benchmark for methods

.code assets/lecture-06/optimizations/config_test.go /BENCHMARK MIDDLE OMIT/,/BENCHMARK END OMIT/

## Run the benchmark

```
$ go test -bench ConfigurationMethod -benchtime 3s -cpuprofile profile.out
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkGetStorageConfigurationMethodByValue-12             267143245                13.39 ns/op
BenchmarkGetStorageConfigurationMethodByReference-12        1000000000               0.2797 ns/op
```

- Pretty much the same result

## Maps

## Maps pre-allocation

- Map allocations via `make` allows to specify expected number of map items

```
m1 := make(map[uuid.UUID]time.Time)
m2 := make(map[uuid.UUID]time.Time, 1000)
```

- Not strictly needed
    - Developers tend to ignore it
- Does it even make sense to try to estimate number of items?
    - Who knows? Probably only the benchmark...

## Benchmark

.code assets/lecture-06/optimizations/maps_test.go /MAP-INSERT START OMIT/,/MAP-INSERT END OMIT/

## Benchmark results

```
$ go test -bench MapInsert -benchtime 3s -cpuprofile maps-insertion.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkMapInsert-12                   45841477               110.2 ns/op
BenchmarkPreallocatedMapInsert-12       100000000               69.12 ns/op
```

## Profile

.image assets/lecture-06/optimizations/maps-insertion-profile.png 500 _

## Maps with large keys

- Keys can be of any type in Go
- So keys might be pretty large
    - Imagine structs

.code assets/lecture-06/optimizations/maps_test.go /COMPOUND-KEY-VALUE START OMIT/,/COMPOUND START OMIT/

## Benchmark

.code assets/lecture-06/optimizations/maps_test.go /COMPOUND START OMIT/,/COMPOUND END OMIT/

## Benchmark results for maps with large keys

```
$ go test -bench CompoundKey \
    -cpuprofile maps-compound-key.cpu.profile \
    -memprofile maps-compound-key.mem.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkInsertIntoPreallocatedMapCompoundKey-12        12507632               110.1 ns/op
BenchmarkInsertIntoEmptyMapCompoundKey-12                8367021               196.1 ns/op
```

- Well, that seems twice as fast
    - Any other difference?

## Memory requirements

- In many cases much more relevant
    - Pods might be killed due to OOM
    - Additional memory has to be bought

## Go profiler to the rescue

.image assets/lecture-06/optimizations/maps-compound-key-mem-profile.png 400 _

## Set implementations

- First developer instinct
    - The usage of `map` of course
- But linear data structures can be used too!

## Benchmark helper functions

.code assets/lecture-06/optimizations/maps_test.go /SET-FILL START OMIT/,/SET-FILL END OMIT/

## Benchmark for map read/in-set operation

.code assets/lecture-06/optimizations/maps_test.go /SET START OMIT/,/SET MIDDLE OMIT/

## Benchmark for slice read/in-set operation

.code assets/lecture-06/optimizations/maps_test.go /SET MIDDLE OMIT/,/SET END OMIT/

## Benchmark results

```
$ go test -bench FindIn -benchtime 3s
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkFindInMap-1-12           1000000000               2.317 ns/op
BenchmarkFindInSlice-1-12         1000000000               0.5603 ns/op
BenchmarkFindInMap-5-12           1000000000               3.471 ns/op
BenchmarkFindInSlice-5-12         1000000000               1.982 ns/op
BenchmarkFindInMap-10-12           732660619               4.749 ns/op
BenchmarkFindInSlice-10-12         885275379               4.077 ns/op
BenchmarkFindInMap-100-12          698380580               5.092 ns/op
BenchmarkFindInSlice-100-12        184744255               19.39 ns/op
BenchmarkFindInMap-1000-12         632352885               5.264 ns/op
BenchmarkFindInSlice-1000-12        22378456               153.9 ns/op
```

## Low number of items

.image assets/lecture-06/optimizations/set-graph.png 500 _

## Higher number of items

.image assets/lecture-06/optimizations/set-all-graph.png 500 _

## Map vs slice for set implementation

.image assets/lecture-06/optimizations/set-scaling-graph.png 500 _

## Slices

## Slices pre-allocation

- `make` allows to specify initial capacity and length for slices

```
s1 := make([]uuid.UUID, 0)
s2 := make([]uuid.UUID, 0, 1000)
```

- The capacity can be ommited
    - But that is rarely wise if you know the size upfront

## Benchmark

.code assets/lecture-06/optimizations/slices_test.go /SLICES-PREALLOCATION START OMIT/,/SLICES-PREALLOCATION END OMIT/

## Benchmark result

```
$ go test -bench Pass -benchtime 3s -cpuprofile slice-insertion.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkSliceInsertion-12                      989681653                9.837 ns/op
BenchmarkPreallocatedSliceInsertion-12          1000000000               1.566 ns/op
```

## Profile

.image assets/lecture-06/optimizations/slices-insertion-profile.png 550 _

## Use slices instead of arrays (if possible)

- C and Java proselytes tend to use arrays a lot
- But in fact, arrays are not used much in idiomatic Go code
- Arrays in Go:
    - Passed by value
        - Copied!
        - Not the case in most other languages
            - C, Java, or Python
    - Semantic is totally different

## Slices in Go

- Structure with three items
   - Pointer to the data
        - Array
   - Length
        - Count of array elements
   - Capacity
        - Size of the allocated array
- Passed by value
   - But only the structure is copied

## Benchmark helper functions

.code assets/lecture-06/optimizations/slices_test.go /CHANGE START OMIT/,/CHANGE END OMIT/

## Slice benchmark

.code assets/lecture-06/optimizations/slices_test.go /SLICE START OMIT/,/SLICE END OMIT/

## Arrays benchmark

.code assets/lecture-06/optimizations/slices_test.go /ARRAY START OMIT/,/ARRAY END OMIT/

## Benchmark results

```
$ go test -bench Pass -benchtime 3s -cpuprofile slices-arrays.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkPassSlice-12                   1000000000               0.3139 ns/op
BenchmarkPassArrayByValue-12            1000000000               0.2793 ns/op
BenchmarkPassArrayByReference-12        1000000000               0.3140 ns/op
```

- What?
    - Compiler detected that local changes are not visible outside the `changeMe2` function
    - Hence, it dropped the function call

## Is it really the case?

.image assets/lecture-06/optimizations/slices-arrays-profile.png 450 _

## Now with a side effect

.code assets/lecture-06/optimizations/slices-mutation_test.go /CHANGE START OMIT/,/CHANGE END OMIT/

## Benchmark slice

.code assets/lecture-06/optimizations/slices-mutation_test.go /SLICE START OMIT/,/SLICE END OMIT/

## Benchmark arrays

.code assets/lecture-06/optimizations/slices-mutation_test.go /ARRAY START OMIT/,/ARRAY END OMIT/

## Benchmark results

```
$ go test -bench Pass -benchtime 3s -cpuprofile slices-arrays-mutation.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkPassSlice-12                   1000000000               0.3855 ns/op
BenchmarkPassArrayByValue-12            359728718               10.02 ns/op
BenchmarkPassArrayByReference-12        1000000000               0.3857 ns/op
```

- That's more like it...

## Benchmark results

.image assets/lecture-06/optimizations/slices-arrays-mutation-profile.png 550 _

## Loops

## Slice benchmark

.code assets/lecture-06/optimizations/for-each_test.go /SLICE START OMIT/,/SLICE END OMIT/

## Slice benchmark results

```
$ go test -bench SliceFor -benchtime 5s --count 5
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkSliceForRange-12          21450            279475 ns/op
BenchmarkSliceForRange-12          21447            279290 ns/op
BenchmarkSliceForRange-12          21434            280112 ns/op
BenchmarkSliceForRange-12          21457            279247 ns/op
BenchmarkSliceForRange-12          21453            279403 ns/op
BenchmarkSliceForIndex-12          21393            280281 ns/op
BenchmarkSliceForIndex-12          21530            281256 ns/op
BenchmarkSliceForIndex-12          20725            292346 ns/op
BenchmarkSliceForIndex-12          20601            286812 ns/op
BenchmarkSliceForIndex-12          20893            282034 ns/op
```

## Map benchmark

.code assets/lecture-06/optimizations/for-each_test.go /MAP START OMIT/,/MAP END OMIT/

## Map benchmark results

```
$ go test -bench MapForLoop -benchtime 5s --count 5
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkMapForLoopValue-12               760           7864646 ns/op
BenchmarkMapForLoopValue-12               762           7976435 ns/op
BenchmarkMapForLoopValue-12               751           8124824 ns/op
BenchmarkMapForLoopValue-12               738           8135197 ns/op
BenchmarkMapForLoopValue-12               732           8108427 ns/op
BenchmarkMapForLoopKey-12                 484          12443618 ns/op
BenchmarkMapForLoopKey-12                 480          12498248 ns/op
BenchmarkMapForLoopKey-12                 477          12452687 ns/op
BenchmarkMapForLoopKey-12                 477          12548773 ns/op
BenchmarkMapForLoopKey-12                 472          12461708 ns/op
```

## Strings

## String builders

- Used for concatenation of strings
    - Very frequent operation
        - Templates
        - JSON and XML serializers
- Usually used inside libraries

## Strings are immutable

```go
type stringStruct struct {
        str unsafe.Pointer
        len int
}
```

- So how can one append strings?
    - Naive builder
        - String concatenation

.code assets/lecture-06/optimizations/builders.go /NAIVE OMIT/,/BYTES OMIT/

## Bytes buffer

- Default

.code assets/lecture-06/optimizations/builders.go /BYTES OMIT/,/BYTES-PREALLOCATED OMIT/

- With pre-allocation

.code assets/lecture-06/optimizations/builders.go /BYTES-PREALLOCATED OMIT/,/STRING OMIT/

## String builder

- Default

.code assets/lecture-06/optimizations/builders.go /STRING OMIT/,/STRING-PREALLOCATED OMIT/

- With pre-allocation

.code assets/lecture-06/optimizations/builders.go /STRING-PREALLOCATED OMIT/,/END OMIT/

## Benchmark result

```
$ go test -bench Builder -cpuprofile builders.profile
```

```
goos: darwin
goarch: arm64
pkg: github.com/course-go/lectures/assets/lecture-06/optimizations
BenchmarkNaiveBuilder-12                          1000000                28445 ns/op
BenchmarkBytesBuilder-12                        477188485                2.551 ns/op
BenchmarkBytesBuilderPreallocated-12            499121337                2.404 ns/op
BenchmarkStringBuilder-12                       464275903                2.665 ns/op
BenchmarkStringBuilderPreallocated-12           500871392                2.378 ns/op
```

## Profile

.image assets/lecture-06/optimizations/builders-profile.png 550 _

##

.image assets/lecture-06/optimizations/builders-lower-graph.png 550 _

##

.image assets/lecture-06/optimizations/builders-higher-graph.png 550 _

## CGo

## CGo

- C and Go, CGo
- Allows interoperability between Go and C
    - Go can call C code and vice versa 
- Foreign function interface
- Interactions via the C "meta" package

[Go Wiki: cgo](https://go.dev/wiki/cgo)

[Go Packages: cgo](https://pkg.go.dev/cmd/cgo)

## CGo

- Has extreme overhead
    - Look for solution in Go
- C code cannot hold pointers in to the Go world
    - Due to the nature of the GC
- Need to manually free heap allocated C memory
    - String, arrays and such
- Code is generated by the `import "C"` statement
    - Even blank lines cannot exist between the import and the C code

## Inlined C code

.play assets/lecture-06/cgo/inlined.go

## Importing C code from separate file

.code assets/lecture-06/cgo/independent.go

## Memory management with C strings

.play assets/lecture-06/cgo/strings.go /START OMIT/,/END OMIT/

## Should I use it then?

- Don't...
    - The disadvantages outweigh the advantages
        - Runtime overhead
        - Slower build time
        - Complicated builds
        - Cross compilation
        - More error prone
    - Rewriting existing C code is almost always the prefer way
        - Always look for existing Go solutions
- Thoroughly examine the CGo docs
- Again, it has an EXTREME overhead

## Unsafe

## Unsafe

- Unsafe operations
    - Not protected by the compatibility promise
- Steps around the type system of Go
- Allows to directly access memory

[Go Packages: unsafe](https://pkg.go.dev/unsafe)

## Unsafe

.play assets/lecture-06/unsafe/unsafe.go /START OMIT/,/END OMIT/

## Reflection

## Reflection

- Run-time reflection
- Allows to manipulate objects with arbitrary types

[Go Packages: reflect](https://pkg.go.dev/reflect)

## Reflection

.play assets/lecture-06/reflect/reflect.go /START OMIT/,/END OMIT/

[Go Blog: The Laws of Reflection](https://go.dev/blog/laws-of-reflection)

## Reflecting structures

.play assets/lecture-06/reflect/struct.go /START OMIT/,/END OMIT/

[Go Blog: The Laws of Reflection](https://go.dev/blog/laws-of-reflection)
